/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersRepairInvoice,
    ControllersRepairInvoiceFromJSON,
    ControllersRepairInvoiceToJSON,
    EntDevice,
    EntDeviceFromJSON,
    EntDeviceToJSON,
    EntRepairInvoice,
    EntRepairInvoiceFromJSON,
    EntRepairInvoiceToJSON,
    EntStatusR,
    EntStatusRFromJSON,
    EntStatusRToJSON,
    EntSymptom,
    EntSymptomFromJSON,
    EntSymptomToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateDeviceRequest {
    device: EntDevice;
}

export interface CreateRepairInvoiceRequest {
    repairInvoice: ControllersRepairInvoice;
}

export interface CreateStatusrRequest {
    statusr: EntStatusR;
}

export interface CreateSymptomRequest {
    symptom: EntSymptom;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteDeviceRequest {
    id: number;
}

export interface DeleteRepairInvoiceRequest {
    id: number;
}

export interface DeleteStatusrRequest {
    id: number;
}

export interface DeleteSymptomRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetDeviceRequest {
    id: number;
}

export interface GetStatusrRequest {
    id: number;
}

export interface GetSymptomRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListDeviceRequest {
    limit?: number;
    offset?: number;
}

export interface ListRepairinvoiceRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatusrRequest {
    limit?: number;
    offset?: number;
}

export interface ListSymptomRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create device
     * Create device
     */
    async createDeviceRaw(requestParameters: CreateDeviceRequest): Promise<runtime.ApiResponse<EntDevice>> {
        if (requestParameters.device === null || requestParameters.device === undefined) {
            throw new runtime.RequiredError('device','Required parameter requestParameters.device was null or undefined when calling createDevice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/devices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDeviceToJSON(requestParameters.device),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDeviceFromJSON(jsonValue));
    }

    /**
     * Create device
     * Create device
     */
    async createDevice(requestParameters: CreateDeviceRequest): Promise<EntDevice> {
        const response = await this.createDeviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create repairInvoice
     * Create repairInvoice
     */
    async createRepairInvoiceRaw(requestParameters: CreateRepairInvoiceRequest): Promise<runtime.ApiResponse<ControllersRepairInvoice>> {
        if (requestParameters.repairInvoice === null || requestParameters.repairInvoice === undefined) {
            throw new runtime.RequiredError('repairInvoice','Required parameter requestParameters.repairInvoice was null or undefined when calling createRepairInvoice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/repairInvoices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRepairInvoiceToJSON(requestParameters.repairInvoice),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersRepairInvoiceFromJSON(jsonValue));
    }

    /**
     * Create repairInvoice
     * Create repairInvoice
     */
    async createRepairInvoice(requestParameters: CreateRepairInvoiceRequest): Promise<ControllersRepairInvoice> {
        const response = await this.createRepairInvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create statusr
     * Create statusr
     */
    async createStatusrRaw(requestParameters: CreateStatusrRequest): Promise<runtime.ApiResponse<EntStatusR>> {
        if (requestParameters.statusr === null || requestParameters.statusr === undefined) {
            throw new runtime.RequiredError('statusr','Required parameter requestParameters.statusr was null or undefined when calling createStatusr.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statusrs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatusRToJSON(requestParameters.statusr),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusRFromJSON(jsonValue));
    }

    /**
     * Create statusr
     * Create statusr
     */
    async createStatusr(requestParameters: CreateStatusrRequest): Promise<EntStatusR> {
        const response = await this.createStatusrRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create symptom
     * Create symptom
     */
    async createSymptomRaw(requestParameters: CreateSymptomRequest): Promise<runtime.ApiResponse<EntSymptom>> {
        if (requestParameters.symptom === null || requestParameters.symptom === undefined) {
            throw new runtime.RequiredError('symptom','Required parameter requestParameters.symptom was null or undefined when calling createSymptom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/stmptoms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSymptomToJSON(requestParameters.symptom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSymptomFromJSON(jsonValue));
    }

    /**
     * Create symptom
     * Create symptom
     */
    async createSymptom(requestParameters: CreateSymptomRequest): Promise<EntSymptom> {
        const response = await this.createSymptomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get device by ID
     * Delete a device entity by ID
     */
    async deleteDeviceRaw(requestParameters: DeleteDeviceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDevice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/devices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get device by ID
     * Delete a device entity by ID
     */
    async deleteDevice(requestParameters: DeleteDeviceRequest): Promise<object> {
        const response = await this.deleteDeviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get repairInvoice by ID
     * Delete a repairInvoice entity by ID
     */
    async deleteRepairInvoiceRaw(requestParameters: DeleteRepairInvoiceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRepairInvoice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/repairvoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get repairInvoice by ID
     * Delete a repairInvoice entity by ID
     */
    async deleteRepairInvoice(requestParameters: DeleteRepairInvoiceRequest): Promise<object> {
        const response = await this.deleteRepairInvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusr by ID
     * Delete a statusr entity by ID
     */
    async deleteStatusrRaw(requestParameters: DeleteStatusrRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatusr.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusrs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get statusr by ID
     * Delete a statusr entity by ID
     */
    async deleteStatusr(requestParameters: DeleteStatusrRequest): Promise<object> {
        const response = await this.deleteStatusrRaw(requestParameters);
        return await response.value();
    }

    /**
     * get symptom by ID
     * Delete a symptom entity by ID
     */
    async deleteSymptomRaw(requestParameters: DeleteSymptomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSymptom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/symptoms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get symptom by ID
     * Delete a symptom entity by ID
     */
    async deleteSymptom(requestParameters: DeleteSymptomRequest): Promise<object> {
        const response = await this.deleteSymptomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get device by ID
     * Get a device entity by ID
     */
    async getDeviceRaw(requestParameters: GetDeviceRequest): Promise<runtime.ApiResponse<EntDevice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDevice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/devices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDeviceFromJSON(jsonValue));
    }

    /**
     * get device by ID
     * Get a device entity by ID
     */
    async getDevice(requestParameters: GetDeviceRequest): Promise<EntDevice> {
        const response = await this.getDeviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusr by ID
     * Get a statusr entity by ID
     */
    async getStatusrRaw(requestParameters: GetStatusrRequest): Promise<runtime.ApiResponse<EntStatusR>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatusr.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusrs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusRFromJSON(jsonValue));
    }

    /**
     * get statusr by ID
     * Get a statusr entity by ID
     */
    async getStatusr(requestParameters: GetStatusrRequest): Promise<EntStatusR> {
        const response = await this.getStatusrRaw(requestParameters);
        return await response.value();
    }

    /**
     * get symptom by ID
     * Get a symptom entity by ID
     */
    async getSymptomRaw(requestParameters: GetSymptomRequest): Promise<runtime.ApiResponse<EntSymptom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSymptom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/symptoms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSymptomFromJSON(jsonValue));
    }

    /**
     * get symptom by ID
     * Get a symptom entity by ID
     */
    async getSymptom(requestParameters: GetSymptomRequest): Promise<EntSymptom> {
        const response = await this.getSymptomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list device entities
     * List device entities
     */
    async listDeviceRaw(requestParameters: ListDeviceRequest): Promise<runtime.ApiResponse<Array<EntDevice>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/devices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDeviceFromJSON));
    }

    /**
     * list device entities
     * List device entities
     */
    async listDevice(requestParameters: ListDeviceRequest): Promise<Array<EntDevice>> {
        const response = await this.listDeviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list repairinvoice entities
     * List repairinvoice entities
     */
    async listRepairinvoiceRaw(requestParameters: ListRepairinvoiceRequest): Promise<runtime.ApiResponse<Array<EntRepairInvoice>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/repairinvoices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRepairInvoiceFromJSON));
    }

    /**
     * list repairinvoice entities
     * List repairinvoice entities
     */
    async listRepairinvoice(requestParameters: ListRepairinvoiceRequest): Promise<Array<EntRepairInvoice>> {
        const response = await this.listRepairinvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list statusr entities
     * List statusr entities
     */
    async listStatusrRaw(requestParameters: ListStatusrRequest): Promise<runtime.ApiResponse<Array<EntStatusR>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusrs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatusRFromJSON));
    }

    /**
     * list statusr entities
     * List statusr entities
     */
    async listStatusr(requestParameters: ListStatusrRequest): Promise<Array<EntStatusR>> {
        const response = await this.listStatusrRaw(requestParameters);
        return await response.value();
    }

    /**
     * list symptom entities
     * List symptom entities
     */
    async listSymptomRaw(requestParameters: ListSymptomRequest): Promise<runtime.ApiResponse<Array<EntSymptom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/symptoms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSymptomFromJSON));
    }

    /**
     * list symptom entities
     * List symptom entities
     */
    async listSymptom(requestParameters: ListSymptomRequest): Promise<Array<EntSymptom>> {
        const response = await this.listSymptomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

}
