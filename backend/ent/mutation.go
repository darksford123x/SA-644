// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/darksford123x/repairinvoice-record/ent/device"
	"github.com/darksford123x/repairinvoice-record/ent/repairinvoice"
	"github.com/darksford123x/repairinvoice-record/ent/statusr"
	"github.com/darksford123x/repairinvoice-record/ent/symptom"
	"github.com/darksford123x/repairinvoice-record/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDevice        = "Device"
	TypeRepairInvoice = "RepairInvoice"
	TypeStatusR       = "StatusR"
	TypeSymptom       = "Symptom"
	TypeUser          = "User"
)

// DeviceMutation represents an operation that mutate the Devices
// nodes in the graph.
type DeviceMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	_Dname                    *string
	clearedFields             map[string]struct{}
	owner                     *int
	clearedowner              bool
	repair_information        map[int]struct{}
	removedrepair_information map[int]struct{}
	done                      bool
	oldValue                  func(context.Context) (*Device, error)
}

var _ ent.Mutation = (*DeviceMutation)(nil)

// deviceOption allows to manage the mutation configuration using functional options.
type deviceOption func(*DeviceMutation)

// newDeviceMutation creates new mutation for $n.Name.
func newDeviceMutation(c config, op Op, opts ...deviceOption) *DeviceMutation {
	m := &DeviceMutation{
		config:        c,
		op:            op,
		typ:           TypeDevice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceID sets the id field of the mutation.
func withDeviceID(id int) deviceOption {
	return func(m *DeviceMutation) {
		var (
			err   error
			once  sync.Once
			value *Device
		)
		m.oldValue = func(ctx context.Context) (*Device, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Device.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDevice sets the old Device of the mutation.
func withDevice(node *Device) deviceOption {
	return func(m *DeviceMutation) {
		m.oldValue = func(context.Context) (*Device, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DeviceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDname sets the Dname field.
func (m *DeviceMutation) SetDname(s string) {
	m._Dname = &s
}

// Dname returns the Dname value in the mutation.
func (m *DeviceMutation) Dname() (r string, exists bool) {
	v := m._Dname
	if v == nil {
		return
	}
	return *v, true
}

// OldDname returns the old Dname value of the Device.
// If the Device object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DeviceMutation) OldDname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDname: %w", err)
	}
	return oldValue.Dname, nil
}

// ResetDname reset all changes of the "Dname" field.
func (m *DeviceMutation) ResetDname() {
	m._Dname = nil
}

// SetOwnerID sets the owner edge to User by id.
func (m *DeviceMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the owner edge to User.
func (m *DeviceMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared returns if the edge owner was cleared.
func (m *DeviceMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the owner id in the mutation.
func (m *DeviceMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the owner ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *DeviceMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner reset all changes of the "owner" edge.
func (m *DeviceMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddRepairInformationIDs adds the repair_information edge to RepairInvoice by ids.
func (m *DeviceMutation) AddRepairInformationIDs(ids ...int) {
	if m.repair_information == nil {
		m.repair_information = make(map[int]struct{})
	}
	for i := range ids {
		m.repair_information[ids[i]] = struct{}{}
	}
}

// RemoveRepairInformationIDs removes the repair_information edge to RepairInvoice by ids.
func (m *DeviceMutation) RemoveRepairInformationIDs(ids ...int) {
	if m.removedrepair_information == nil {
		m.removedrepair_information = make(map[int]struct{})
	}
	for i := range ids {
		m.removedrepair_information[ids[i]] = struct{}{}
	}
}

// RemovedRepairInformation returns the removed ids of repair_information.
func (m *DeviceMutation) RemovedRepairInformationIDs() (ids []int) {
	for id := range m.removedrepair_information {
		ids = append(ids, id)
	}
	return
}

// RepairInformationIDs returns the repair_information ids in the mutation.
func (m *DeviceMutation) RepairInformationIDs() (ids []int) {
	for id := range m.repair_information {
		ids = append(ids, id)
	}
	return
}

// ResetRepairInformation reset all changes of the "repair_information" edge.
func (m *DeviceMutation) ResetRepairInformation() {
	m.repair_information = nil
	m.removedrepair_information = nil
}

// Op returns the operation name.
func (m *DeviceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Device).
func (m *DeviceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DeviceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Dname != nil {
		fields = append(fields, device.FieldDname)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DeviceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case device.FieldDname:
		return m.Dname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DeviceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case device.FieldDname:
		return m.OldDname(ctx)
	}
	return nil, fmt.Errorf("unknown Device field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DeviceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case device.FieldDname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDname(v)
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DeviceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DeviceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DeviceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Device numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DeviceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DeviceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Device nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DeviceMutation) ResetField(name string) error {
	switch name {
	case device.FieldDname:
		m.ResetDname()
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DeviceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owner != nil {
		edges = append(edges, device.EdgeOwner)
	}
	if m.repair_information != nil {
		edges = append(edges, device.EdgeRepairInformation)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DeviceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case device.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case device.EdgeRepairInformation:
		ids := make([]ent.Value, 0, len(m.repair_information))
		for id := range m.repair_information {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DeviceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrepair_information != nil {
		edges = append(edges, device.EdgeRepairInformation)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DeviceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case device.EdgeRepairInformation:
		ids := make([]ent.Value, 0, len(m.removedrepair_information))
		for id := range m.removedrepair_information {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DeviceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowner {
		edges = append(edges, device.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DeviceMutation) EdgeCleared(name string) bool {
	switch name {
	case device.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DeviceMutation) ClearEdge(name string) error {
	switch name {
	case device.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Device unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DeviceMutation) ResetEdge(name string) error {
	switch name {
	case device.EdgeOwner:
		m.ResetOwner()
		return nil
	case device.EdgeRepairInformation:
		m.ResetRepairInformation()
		return nil
	}
	return fmt.Errorf("unknown Device edge %s", name)
}

// RepairInvoiceMutation represents an operation that mutate the RepairInvoices
// nodes in the graph.
type RepairInvoiceMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Rename        *string
	clearedFields  map[string]struct{}
	device         *int
	cleareddevice  bool
	status         *int
	clearedstatus  bool
	symptom        *int
	clearedsymptom bool
	done           bool
	oldValue       func(context.Context) (*RepairInvoice, error)
}

var _ ent.Mutation = (*RepairInvoiceMutation)(nil)

// repairinvoiceOption allows to manage the mutation configuration using functional options.
type repairinvoiceOption func(*RepairInvoiceMutation)

// newRepairInvoiceMutation creates new mutation for $n.Name.
func newRepairInvoiceMutation(c config, op Op, opts ...repairinvoiceOption) *RepairInvoiceMutation {
	m := &RepairInvoiceMutation{
		config:        c,
		op:            op,
		typ:           TypeRepairInvoice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRepairInvoiceID sets the id field of the mutation.
func withRepairInvoiceID(id int) repairinvoiceOption {
	return func(m *RepairInvoiceMutation) {
		var (
			err   error
			once  sync.Once
			value *RepairInvoice
		)
		m.oldValue = func(ctx context.Context) (*RepairInvoice, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RepairInvoice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRepairInvoice sets the old RepairInvoice of the mutation.
func withRepairInvoice(node *RepairInvoice) repairinvoiceOption {
	return func(m *RepairInvoiceMutation) {
		m.oldValue = func(context.Context) (*RepairInvoice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RepairInvoiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RepairInvoiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RepairInvoiceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRename sets the Rename field.
func (m *RepairInvoiceMutation) SetRename(s string) {
	m._Rename = &s
}

// Rename returns the Rename value in the mutation.
func (m *RepairInvoiceMutation) Rename() (r string, exists bool) {
	v := m._Rename
	if v == nil {
		return
	}
	return *v, true
}

// OldRename returns the old Rename value of the RepairInvoice.
// If the RepairInvoice object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RepairInvoiceMutation) OldRename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRename is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRename: %w", err)
	}
	return oldValue.Rename, nil
}

// ResetRename reset all changes of the "Rename" field.
func (m *RepairInvoiceMutation) ResetRename() {
	m._Rename = nil
}

// SetDeviceID sets the device edge to Device by id.
func (m *RepairInvoiceMutation) SetDeviceID(id int) {
	m.device = &id
}

// ClearDevice clears the device edge to Device.
func (m *RepairInvoiceMutation) ClearDevice() {
	m.cleareddevice = true
}

// DeviceCleared returns if the edge device was cleared.
func (m *RepairInvoiceMutation) DeviceCleared() bool {
	return m.cleareddevice
}

// DeviceID returns the device id in the mutation.
func (m *RepairInvoiceMutation) DeviceID() (id int, exists bool) {
	if m.device != nil {
		return *m.device, true
	}
	return
}

// DeviceIDs returns the device ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DeviceID instead. It exists only for internal usage by the builders.
func (m *RepairInvoiceMutation) DeviceIDs() (ids []int) {
	if id := m.device; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDevice reset all changes of the "device" edge.
func (m *RepairInvoiceMutation) ResetDevice() {
	m.device = nil
	m.cleareddevice = false
}

// SetStatusID sets the status edge to StatusR by id.
func (m *RepairInvoiceMutation) SetStatusID(id int) {
	m.status = &id
}

// ClearStatus clears the status edge to StatusR.
func (m *RepairInvoiceMutation) ClearStatus() {
	m.clearedstatus = true
}

// StatusCleared returns if the edge status was cleared.
func (m *RepairInvoiceMutation) StatusCleared() bool {
	return m.clearedstatus
}

// StatusID returns the status id in the mutation.
func (m *RepairInvoiceMutation) StatusID() (id int, exists bool) {
	if m.status != nil {
		return *m.status, true
	}
	return
}

// StatusIDs returns the status ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// StatusID instead. It exists only for internal usage by the builders.
func (m *RepairInvoiceMutation) StatusIDs() (ids []int) {
	if id := m.status; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStatus reset all changes of the "status" edge.
func (m *RepairInvoiceMutation) ResetStatus() {
	m.status = nil
	m.clearedstatus = false
}

// SetSymptomID sets the symptom edge to Symptom by id.
func (m *RepairInvoiceMutation) SetSymptomID(id int) {
	m.symptom = &id
}

// ClearSymptom clears the symptom edge to Symptom.
func (m *RepairInvoiceMutation) ClearSymptom() {
	m.clearedsymptom = true
}

// SymptomCleared returns if the edge symptom was cleared.
func (m *RepairInvoiceMutation) SymptomCleared() bool {
	return m.clearedsymptom
}

// SymptomID returns the symptom id in the mutation.
func (m *RepairInvoiceMutation) SymptomID() (id int, exists bool) {
	if m.symptom != nil {
		return *m.symptom, true
	}
	return
}

// SymptomIDs returns the symptom ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// SymptomID instead. It exists only for internal usage by the builders.
func (m *RepairInvoiceMutation) SymptomIDs() (ids []int) {
	if id := m.symptom; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSymptom reset all changes of the "symptom" edge.
func (m *RepairInvoiceMutation) ResetSymptom() {
	m.symptom = nil
	m.clearedsymptom = false
}

// Op returns the operation name.
func (m *RepairInvoiceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RepairInvoice).
func (m *RepairInvoiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RepairInvoiceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Rename != nil {
		fields = append(fields, repairinvoice.FieldRename)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RepairInvoiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case repairinvoice.FieldRename:
		return m.Rename()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RepairInvoiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case repairinvoice.FieldRename:
		return m.OldRename(ctx)
	}
	return nil, fmt.Errorf("unknown RepairInvoice field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RepairInvoiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case repairinvoice.FieldRename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRename(v)
		return nil
	}
	return fmt.Errorf("unknown RepairInvoice field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RepairInvoiceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RepairInvoiceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RepairInvoiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RepairInvoice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RepairInvoiceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RepairInvoiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RepairInvoiceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RepairInvoice nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RepairInvoiceMutation) ResetField(name string) error {
	switch name {
	case repairinvoice.FieldRename:
		m.ResetRename()
		return nil
	}
	return fmt.Errorf("unknown RepairInvoice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RepairInvoiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.device != nil {
		edges = append(edges, repairinvoice.EdgeDevice)
	}
	if m.status != nil {
		edges = append(edges, repairinvoice.EdgeStatus)
	}
	if m.symptom != nil {
		edges = append(edges, repairinvoice.EdgeSymptom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RepairInvoiceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case repairinvoice.EdgeDevice:
		if id := m.device; id != nil {
			return []ent.Value{*id}
		}
	case repairinvoice.EdgeStatus:
		if id := m.status; id != nil {
			return []ent.Value{*id}
		}
	case repairinvoice.EdgeSymptom:
		if id := m.symptom; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RepairInvoiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RepairInvoiceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RepairInvoiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddevice {
		edges = append(edges, repairinvoice.EdgeDevice)
	}
	if m.clearedstatus {
		edges = append(edges, repairinvoice.EdgeStatus)
	}
	if m.clearedsymptom {
		edges = append(edges, repairinvoice.EdgeSymptom)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RepairInvoiceMutation) EdgeCleared(name string) bool {
	switch name {
	case repairinvoice.EdgeDevice:
		return m.cleareddevice
	case repairinvoice.EdgeStatus:
		return m.clearedstatus
	case repairinvoice.EdgeSymptom:
		return m.clearedsymptom
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RepairInvoiceMutation) ClearEdge(name string) error {
	switch name {
	case repairinvoice.EdgeDevice:
		m.ClearDevice()
		return nil
	case repairinvoice.EdgeStatus:
		m.ClearStatus()
		return nil
	case repairinvoice.EdgeSymptom:
		m.ClearSymptom()
		return nil
	}
	return fmt.Errorf("unknown RepairInvoice unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RepairInvoiceMutation) ResetEdge(name string) error {
	switch name {
	case repairinvoice.EdgeDevice:
		m.ResetDevice()
		return nil
	case repairinvoice.EdgeStatus:
		m.ResetStatus()
		return nil
	case repairinvoice.EdgeSymptom:
		m.ResetSymptom()
		return nil
	}
	return fmt.Errorf("unknown RepairInvoice edge %s", name)
}

// StatusRMutation represents an operation that mutate the StatusRs
// nodes in the graph.
type StatusRMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	_Sname                    *string
	clearedFields             map[string]struct{}
	repair_information        map[int]struct{}
	removedrepair_information map[int]struct{}
	done                      bool
	oldValue                  func(context.Context) (*StatusR, error)
}

var _ ent.Mutation = (*StatusRMutation)(nil)

// statusrOption allows to manage the mutation configuration using functional options.
type statusrOption func(*StatusRMutation)

// newStatusRMutation creates new mutation for $n.Name.
func newStatusRMutation(c config, op Op, opts ...statusrOption) *StatusRMutation {
	m := &StatusRMutation{
		config:        c,
		op:            op,
		typ:           TypeStatusR,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatusRID sets the id field of the mutation.
func withStatusRID(id int) statusrOption {
	return func(m *StatusRMutation) {
		var (
			err   error
			once  sync.Once
			value *StatusR
		)
		m.oldValue = func(ctx context.Context) (*StatusR, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StatusR.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatusR sets the old StatusR of the mutation.
func withStatusR(node *StatusR) statusrOption {
	return func(m *StatusRMutation) {
		m.oldValue = func(context.Context) (*StatusR, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatusRMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatusRMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *StatusRMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSname sets the Sname field.
func (m *StatusRMutation) SetSname(s string) {
	m._Sname = &s
}

// Sname returns the Sname value in the mutation.
func (m *StatusRMutation) Sname() (r string, exists bool) {
	v := m._Sname
	if v == nil {
		return
	}
	return *v, true
}

// OldSname returns the old Sname value of the StatusR.
// If the StatusR object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *StatusRMutation) OldSname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSname: %w", err)
	}
	return oldValue.Sname, nil
}

// ResetSname reset all changes of the "Sname" field.
func (m *StatusRMutation) ResetSname() {
	m._Sname = nil
}

// AddRepairInformationIDs adds the repair_information edge to RepairInvoice by ids.
func (m *StatusRMutation) AddRepairInformationIDs(ids ...int) {
	if m.repair_information == nil {
		m.repair_information = make(map[int]struct{})
	}
	for i := range ids {
		m.repair_information[ids[i]] = struct{}{}
	}
}

// RemoveRepairInformationIDs removes the repair_information edge to RepairInvoice by ids.
func (m *StatusRMutation) RemoveRepairInformationIDs(ids ...int) {
	if m.removedrepair_information == nil {
		m.removedrepair_information = make(map[int]struct{})
	}
	for i := range ids {
		m.removedrepair_information[ids[i]] = struct{}{}
	}
}

// RemovedRepairInformation returns the removed ids of repair_information.
func (m *StatusRMutation) RemovedRepairInformationIDs() (ids []int) {
	for id := range m.removedrepair_information {
		ids = append(ids, id)
	}
	return
}

// RepairInformationIDs returns the repair_information ids in the mutation.
func (m *StatusRMutation) RepairInformationIDs() (ids []int) {
	for id := range m.repair_information {
		ids = append(ids, id)
	}
	return
}

// ResetRepairInformation reset all changes of the "repair_information" edge.
func (m *StatusRMutation) ResetRepairInformation() {
	m.repair_information = nil
	m.removedrepair_information = nil
}

// Op returns the operation name.
func (m *StatusRMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (StatusR).
func (m *StatusRMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *StatusRMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Sname != nil {
		fields = append(fields, statusr.FieldSname)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *StatusRMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case statusr.FieldSname:
		return m.Sname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *StatusRMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case statusr.FieldSname:
		return m.OldSname(ctx)
	}
	return nil, fmt.Errorf("unknown StatusR field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StatusRMutation) SetField(name string, value ent.Value) error {
	switch name {
	case statusr.FieldSname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSname(v)
		return nil
	}
	return fmt.Errorf("unknown StatusR field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *StatusRMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *StatusRMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StatusRMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StatusR numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *StatusRMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *StatusRMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatusRMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StatusR nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *StatusRMutation) ResetField(name string) error {
	switch name {
	case statusr.FieldSname:
		m.ResetSname()
		return nil
	}
	return fmt.Errorf("unknown StatusR field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *StatusRMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.repair_information != nil {
		edges = append(edges, statusr.EdgeRepairInformation)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *StatusRMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case statusr.EdgeRepairInformation:
		ids := make([]ent.Value, 0, len(m.repair_information))
		for id := range m.repair_information {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *StatusRMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrepair_information != nil {
		edges = append(edges, statusr.EdgeRepairInformation)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *StatusRMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case statusr.EdgeRepairInformation:
		ids := make([]ent.Value, 0, len(m.removedrepair_information))
		for id := range m.removedrepair_information {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *StatusRMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *StatusRMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *StatusRMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown StatusR unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *StatusRMutation) ResetEdge(name string) error {
	switch name {
	case statusr.EdgeRepairInformation:
		m.ResetRepairInformation()
		return nil
	}
	return fmt.Errorf("unknown StatusR edge %s", name)
}

// SymptomMutation represents an operation that mutate the Symptoms
// nodes in the graph.
type SymptomMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	_Syname                   *string
	clearedFields             map[string]struct{}
	repair_information        map[int]struct{}
	removedrepair_information map[int]struct{}
	done                      bool
	oldValue                  func(context.Context) (*Symptom, error)
}

var _ ent.Mutation = (*SymptomMutation)(nil)

// symptomOption allows to manage the mutation configuration using functional options.
type symptomOption func(*SymptomMutation)

// newSymptomMutation creates new mutation for $n.Name.
func newSymptomMutation(c config, op Op, opts ...symptomOption) *SymptomMutation {
	m := &SymptomMutation{
		config:        c,
		op:            op,
		typ:           TypeSymptom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSymptomID sets the id field of the mutation.
func withSymptomID(id int) symptomOption {
	return func(m *SymptomMutation) {
		var (
			err   error
			once  sync.Once
			value *Symptom
		)
		m.oldValue = func(ctx context.Context) (*Symptom, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Symptom.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSymptom sets the old Symptom of the mutation.
func withSymptom(node *Symptom) symptomOption {
	return func(m *SymptomMutation) {
		m.oldValue = func(context.Context) (*Symptom, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SymptomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SymptomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SymptomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSyname sets the Syname field.
func (m *SymptomMutation) SetSyname(s string) {
	m._Syname = &s
}

// Syname returns the Syname value in the mutation.
func (m *SymptomMutation) Syname() (r string, exists bool) {
	v := m._Syname
	if v == nil {
		return
	}
	return *v, true
}

// OldSyname returns the old Syname value of the Symptom.
// If the Symptom object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SymptomMutation) OldSyname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSyname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSyname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSyname: %w", err)
	}
	return oldValue.Syname, nil
}

// ResetSyname reset all changes of the "Syname" field.
func (m *SymptomMutation) ResetSyname() {
	m._Syname = nil
}

// AddRepairInformationIDs adds the repair_information edge to RepairInvoice by ids.
func (m *SymptomMutation) AddRepairInformationIDs(ids ...int) {
	if m.repair_information == nil {
		m.repair_information = make(map[int]struct{})
	}
	for i := range ids {
		m.repair_information[ids[i]] = struct{}{}
	}
}

// RemoveRepairInformationIDs removes the repair_information edge to RepairInvoice by ids.
func (m *SymptomMutation) RemoveRepairInformationIDs(ids ...int) {
	if m.removedrepair_information == nil {
		m.removedrepair_information = make(map[int]struct{})
	}
	for i := range ids {
		m.removedrepair_information[ids[i]] = struct{}{}
	}
}

// RemovedRepairInformation returns the removed ids of repair_information.
func (m *SymptomMutation) RemovedRepairInformationIDs() (ids []int) {
	for id := range m.removedrepair_information {
		ids = append(ids, id)
	}
	return
}

// RepairInformationIDs returns the repair_information ids in the mutation.
func (m *SymptomMutation) RepairInformationIDs() (ids []int) {
	for id := range m.repair_information {
		ids = append(ids, id)
	}
	return
}

// ResetRepairInformation reset all changes of the "repair_information" edge.
func (m *SymptomMutation) ResetRepairInformation() {
	m.repair_information = nil
	m.removedrepair_information = nil
}

// Op returns the operation name.
func (m *SymptomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Symptom).
func (m *SymptomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SymptomMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Syname != nil {
		fields = append(fields, symptom.FieldSyname)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SymptomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case symptom.FieldSyname:
		return m.Syname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SymptomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case symptom.FieldSyname:
		return m.OldSyname(ctx)
	}
	return nil, fmt.Errorf("unknown Symptom field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SymptomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case symptom.FieldSyname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSyname(v)
		return nil
	}
	return fmt.Errorf("unknown Symptom field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SymptomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SymptomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SymptomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Symptom numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SymptomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SymptomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SymptomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Symptom nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SymptomMutation) ResetField(name string) error {
	switch name {
	case symptom.FieldSyname:
		m.ResetSyname()
		return nil
	}
	return fmt.Errorf("unknown Symptom field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SymptomMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.repair_information != nil {
		edges = append(edges, symptom.EdgeRepairInformation)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SymptomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case symptom.EdgeRepairInformation:
		ids := make([]ent.Value, 0, len(m.repair_information))
		for id := range m.repair_information {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SymptomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrepair_information != nil {
		edges = append(edges, symptom.EdgeRepairInformation)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SymptomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case symptom.EdgeRepairInformation:
		ids := make([]ent.Value, 0, len(m.removedrepair_information))
		for id := range m.removedrepair_information {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SymptomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SymptomMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SymptomMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Symptom unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SymptomMutation) ResetEdge(name string) error {
	switch name {
	case symptom.EdgeRepairInformation:
		m.ResetRepairInformation()
		return nil
	}
	return fmt.Errorf("unknown Symptom edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Uname        *string
	clearedFields map[string]struct{}
	device        map[int]struct{}
	removeddevice map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUname sets the Uname field.
func (m *UserMutation) SetUname(s string) {
	m._Uname = &s
}

// Uname returns the Uname value in the mutation.
func (m *UserMutation) Uname() (r string, exists bool) {
	v := m._Uname
	if v == nil {
		return
	}
	return *v, true
}

// OldUname returns the old Uname value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUname: %w", err)
	}
	return oldValue.Uname, nil
}

// ResetUname reset all changes of the "Uname" field.
func (m *UserMutation) ResetUname() {
	m._Uname = nil
}

// AddDeviceIDs adds the device edge to Device by ids.
func (m *UserMutation) AddDeviceIDs(ids ...int) {
	if m.device == nil {
		m.device = make(map[int]struct{})
	}
	for i := range ids {
		m.device[ids[i]] = struct{}{}
	}
}

// RemoveDeviceIDs removes the device edge to Device by ids.
func (m *UserMutation) RemoveDeviceIDs(ids ...int) {
	if m.removeddevice == nil {
		m.removeddevice = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddevice[ids[i]] = struct{}{}
	}
}

// RemovedDevice returns the removed ids of device.
func (m *UserMutation) RemovedDeviceIDs() (ids []int) {
	for id := range m.removeddevice {
		ids = append(ids, id)
	}
	return
}

// DeviceIDs returns the device ids in the mutation.
func (m *UserMutation) DeviceIDs() (ids []int) {
	for id := range m.device {
		ids = append(ids, id)
	}
	return
}

// ResetDevice reset all changes of the "device" edge.
func (m *UserMutation) ResetDevice() {
	m.device = nil
	m.removeddevice = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Uname != nil {
		fields = append(fields, user.FieldUname)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUname:
		return m.Uname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUname:
		return m.OldUname(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUname(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUname:
		m.ResetUname()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.device != nil {
		edges = append(edges, user.EdgeDevice)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDevice:
		ids := make([]ent.Value, 0, len(m.device))
		for id := range m.device {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddevice != nil {
		edges = append(edges, user.EdgeDevice)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDevice:
		ids := make([]ent.Value, 0, len(m.removeddevice))
		for id := range m.removeddevice {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeDevice:
		m.ResetDevice()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
