// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/darksford123x/repairinvoice-record/ent/device"
	"github.com/darksford123x/repairinvoice-record/ent/predicate"
	"github.com/darksford123x/repairinvoice-record/ent/repairinvoice"
	"github.com/darksford123x/repairinvoice-record/ent/statusr"
	"github.com/darksford123x/repairinvoice-record/ent/symptom"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RepairInvoiceUpdate is the builder for updating RepairInvoice entities.
type RepairInvoiceUpdate struct {
	config
	hooks      []Hook
	mutation   *RepairInvoiceMutation
	predicates []predicate.RepairInvoice
}

// Where adds a new predicate for the builder.
func (riu *RepairInvoiceUpdate) Where(ps ...predicate.RepairInvoice) *RepairInvoiceUpdate {
	riu.predicates = append(riu.predicates, ps...)
	return riu
}

// SetRename sets the Rename field.
func (riu *RepairInvoiceUpdate) SetRename(s string) *RepairInvoiceUpdate {
	riu.mutation.SetRename(s)
	return riu
}

// SetDeviceID sets the device edge to Device by id.
func (riu *RepairInvoiceUpdate) SetDeviceID(id int) *RepairInvoiceUpdate {
	riu.mutation.SetDeviceID(id)
	return riu
}

// SetNillableDeviceID sets the device edge to Device by id if the given value is not nil.
func (riu *RepairInvoiceUpdate) SetNillableDeviceID(id *int) *RepairInvoiceUpdate {
	if id != nil {
		riu = riu.SetDeviceID(*id)
	}
	return riu
}

// SetDevice sets the device edge to Device.
func (riu *RepairInvoiceUpdate) SetDevice(d *Device) *RepairInvoiceUpdate {
	return riu.SetDeviceID(d.ID)
}

// SetStatusID sets the status edge to StatusR by id.
func (riu *RepairInvoiceUpdate) SetStatusID(id int) *RepairInvoiceUpdate {
	riu.mutation.SetStatusID(id)
	return riu
}

// SetNillableStatusID sets the status edge to StatusR by id if the given value is not nil.
func (riu *RepairInvoiceUpdate) SetNillableStatusID(id *int) *RepairInvoiceUpdate {
	if id != nil {
		riu = riu.SetStatusID(*id)
	}
	return riu
}

// SetStatus sets the status edge to StatusR.
func (riu *RepairInvoiceUpdate) SetStatus(s *StatusR) *RepairInvoiceUpdate {
	return riu.SetStatusID(s.ID)
}

// SetSymptomID sets the symptom edge to Symptom by id.
func (riu *RepairInvoiceUpdate) SetSymptomID(id int) *RepairInvoiceUpdate {
	riu.mutation.SetSymptomID(id)
	return riu
}

// SetNillableSymptomID sets the symptom edge to Symptom by id if the given value is not nil.
func (riu *RepairInvoiceUpdate) SetNillableSymptomID(id *int) *RepairInvoiceUpdate {
	if id != nil {
		riu = riu.SetSymptomID(*id)
	}
	return riu
}

// SetSymptom sets the symptom edge to Symptom.
func (riu *RepairInvoiceUpdate) SetSymptom(s *Symptom) *RepairInvoiceUpdate {
	return riu.SetSymptomID(s.ID)
}

// Mutation returns the RepairInvoiceMutation object of the builder.
func (riu *RepairInvoiceUpdate) Mutation() *RepairInvoiceMutation {
	return riu.mutation
}

// ClearDevice clears the device edge to Device.
func (riu *RepairInvoiceUpdate) ClearDevice() *RepairInvoiceUpdate {
	riu.mutation.ClearDevice()
	return riu
}

// ClearStatus clears the status edge to StatusR.
func (riu *RepairInvoiceUpdate) ClearStatus() *RepairInvoiceUpdate {
	riu.mutation.ClearStatus()
	return riu
}

// ClearSymptom clears the symptom edge to Symptom.
func (riu *RepairInvoiceUpdate) ClearSymptom() *RepairInvoiceUpdate {
	riu.mutation.ClearSymptom()
	return riu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (riu *RepairInvoiceUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(riu.hooks) == 0 {
		affected, err = riu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepairInvoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			riu.mutation = mutation
			affected, err = riu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(riu.hooks) - 1; i >= 0; i-- {
			mut = riu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, riu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (riu *RepairInvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := riu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (riu *RepairInvoiceUpdate) Exec(ctx context.Context) error {
	_, err := riu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (riu *RepairInvoiceUpdate) ExecX(ctx context.Context) {
	if err := riu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (riu *RepairInvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   repairinvoice.Table,
			Columns: repairinvoice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repairinvoice.FieldID,
			},
		},
	}
	if ps := riu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := riu.mutation.Rename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repairinvoice.FieldRename,
		})
	}
	if riu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.DeviceTable,
			Columns: []string{repairinvoice.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := riu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.DeviceTable,
			Columns: []string{repairinvoice.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if riu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.StatusTable,
			Columns: []string{repairinvoice.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusr.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := riu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.StatusTable,
			Columns: []string{repairinvoice.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if riu.mutation.SymptomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.SymptomTable,
			Columns: []string{repairinvoice.SymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: symptom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := riu.mutation.SymptomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.SymptomTable,
			Columns: []string{repairinvoice.SymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: symptom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, riu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repairinvoice.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RepairInvoiceUpdateOne is the builder for updating a single RepairInvoice entity.
type RepairInvoiceUpdateOne struct {
	config
	hooks    []Hook
	mutation *RepairInvoiceMutation
}

// SetRename sets the Rename field.
func (riuo *RepairInvoiceUpdateOne) SetRename(s string) *RepairInvoiceUpdateOne {
	riuo.mutation.SetRename(s)
	return riuo
}

// SetDeviceID sets the device edge to Device by id.
func (riuo *RepairInvoiceUpdateOne) SetDeviceID(id int) *RepairInvoiceUpdateOne {
	riuo.mutation.SetDeviceID(id)
	return riuo
}

// SetNillableDeviceID sets the device edge to Device by id if the given value is not nil.
func (riuo *RepairInvoiceUpdateOne) SetNillableDeviceID(id *int) *RepairInvoiceUpdateOne {
	if id != nil {
		riuo = riuo.SetDeviceID(*id)
	}
	return riuo
}

// SetDevice sets the device edge to Device.
func (riuo *RepairInvoiceUpdateOne) SetDevice(d *Device) *RepairInvoiceUpdateOne {
	return riuo.SetDeviceID(d.ID)
}

// SetStatusID sets the status edge to StatusR by id.
func (riuo *RepairInvoiceUpdateOne) SetStatusID(id int) *RepairInvoiceUpdateOne {
	riuo.mutation.SetStatusID(id)
	return riuo
}

// SetNillableStatusID sets the status edge to StatusR by id if the given value is not nil.
func (riuo *RepairInvoiceUpdateOne) SetNillableStatusID(id *int) *RepairInvoiceUpdateOne {
	if id != nil {
		riuo = riuo.SetStatusID(*id)
	}
	return riuo
}

// SetStatus sets the status edge to StatusR.
func (riuo *RepairInvoiceUpdateOne) SetStatus(s *StatusR) *RepairInvoiceUpdateOne {
	return riuo.SetStatusID(s.ID)
}

// SetSymptomID sets the symptom edge to Symptom by id.
func (riuo *RepairInvoiceUpdateOne) SetSymptomID(id int) *RepairInvoiceUpdateOne {
	riuo.mutation.SetSymptomID(id)
	return riuo
}

// SetNillableSymptomID sets the symptom edge to Symptom by id if the given value is not nil.
func (riuo *RepairInvoiceUpdateOne) SetNillableSymptomID(id *int) *RepairInvoiceUpdateOne {
	if id != nil {
		riuo = riuo.SetSymptomID(*id)
	}
	return riuo
}

// SetSymptom sets the symptom edge to Symptom.
func (riuo *RepairInvoiceUpdateOne) SetSymptom(s *Symptom) *RepairInvoiceUpdateOne {
	return riuo.SetSymptomID(s.ID)
}

// Mutation returns the RepairInvoiceMutation object of the builder.
func (riuo *RepairInvoiceUpdateOne) Mutation() *RepairInvoiceMutation {
	return riuo.mutation
}

// ClearDevice clears the device edge to Device.
func (riuo *RepairInvoiceUpdateOne) ClearDevice() *RepairInvoiceUpdateOne {
	riuo.mutation.ClearDevice()
	return riuo
}

// ClearStatus clears the status edge to StatusR.
func (riuo *RepairInvoiceUpdateOne) ClearStatus() *RepairInvoiceUpdateOne {
	riuo.mutation.ClearStatus()
	return riuo
}

// ClearSymptom clears the symptom edge to Symptom.
func (riuo *RepairInvoiceUpdateOne) ClearSymptom() *RepairInvoiceUpdateOne {
	riuo.mutation.ClearSymptom()
	return riuo
}

// Save executes the query and returns the updated entity.
func (riuo *RepairInvoiceUpdateOne) Save(ctx context.Context) (*RepairInvoice, error) {

	var (
		err  error
		node *RepairInvoice
	)
	if len(riuo.hooks) == 0 {
		node, err = riuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepairInvoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			riuo.mutation = mutation
			node, err = riuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(riuo.hooks) - 1; i >= 0; i-- {
			mut = riuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, riuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (riuo *RepairInvoiceUpdateOne) SaveX(ctx context.Context) *RepairInvoice {
	ri, err := riuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ri
}

// Exec executes the query on the entity.
func (riuo *RepairInvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := riuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (riuo *RepairInvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := riuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (riuo *RepairInvoiceUpdateOne) sqlSave(ctx context.Context) (ri *RepairInvoice, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   repairinvoice.Table,
			Columns: repairinvoice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repairinvoice.FieldID,
			},
		},
	}
	id, ok := riuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RepairInvoice.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := riuo.mutation.Rename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repairinvoice.FieldRename,
		})
	}
	if riuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.DeviceTable,
			Columns: []string{repairinvoice.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := riuo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.DeviceTable,
			Columns: []string{repairinvoice.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if riuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.StatusTable,
			Columns: []string{repairinvoice.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusr.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := riuo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.StatusTable,
			Columns: []string{repairinvoice.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if riuo.mutation.SymptomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.SymptomTable,
			Columns: []string{repairinvoice.SymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: symptom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := riuo.mutation.SymptomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.SymptomTable,
			Columns: []string{repairinvoice.SymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: symptom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ri = &RepairInvoice{config: riuo.config}
	_spec.Assign = ri.assignValues
	_spec.ScanValues = ri.scanValues()
	if err = sqlgraph.UpdateNode(ctx, riuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repairinvoice.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ri, nil
}
