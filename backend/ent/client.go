// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/darksford123x/repairinvoice-record/ent/migrate"

	"github.com/darksford123x/repairinvoice-record/ent/device"
	"github.com/darksford123x/repairinvoice-record/ent/repairinvoice"
	"github.com/darksford123x/repairinvoice-record/ent/statusr"
	"github.com/darksford123x/repairinvoice-record/ent/symptom"
	"github.com/darksford123x/repairinvoice-record/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Device is the client for interacting with the Device builders.
	Device *DeviceClient
	// RepairInvoice is the client for interacting with the RepairInvoice builders.
	RepairInvoice *RepairInvoiceClient
	// StatusR is the client for interacting with the StatusR builders.
	StatusR *StatusRClient
	// Symptom is the client for interacting with the Symptom builders.
	Symptom *SymptomClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Device = NewDeviceClient(c.config)
	c.RepairInvoice = NewRepairInvoiceClient(c.config)
	c.StatusR = NewStatusRClient(c.config)
	c.Symptom = NewSymptomClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Device:        NewDeviceClient(cfg),
		RepairInvoice: NewRepairInvoiceClient(cfg),
		StatusR:       NewStatusRClient(cfg),
		Symptom:       NewSymptomClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		Device:        NewDeviceClient(cfg),
		RepairInvoice: NewRepairInvoiceClient(cfg),
		StatusR:       NewStatusRClient(cfg),
		Symptom:       NewSymptomClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Device.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Device.Use(hooks...)
	c.RepairInvoice.Use(hooks...)
	c.StatusR.Use(hooks...)
	c.Symptom.Use(hooks...)
	c.User.Use(hooks...)
}

// DeviceClient is a client for the Device schema.
type DeviceClient struct {
	config
}

// NewDeviceClient returns a client for the Device from the given config.
func NewDeviceClient(c config) *DeviceClient {
	return &DeviceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `device.Hooks(f(g(h())))`.
func (c *DeviceClient) Use(hooks ...Hook) {
	c.hooks.Device = append(c.hooks.Device, hooks...)
}

// Create returns a create builder for Device.
func (c *DeviceClient) Create() *DeviceCreate {
	mutation := newDeviceMutation(c.config, OpCreate)
	return &DeviceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Device.
func (c *DeviceClient) Update() *DeviceUpdate {
	mutation := newDeviceMutation(c.config, OpUpdate)
	return &DeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceClient) UpdateOne(d *Device) *DeviceUpdateOne {
	mutation := newDeviceMutation(c.config, OpUpdateOne, withDevice(d))
	return &DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceClient) UpdateOneID(id int) *DeviceUpdateOne {
	mutation := newDeviceMutation(c.config, OpUpdateOne, withDeviceID(id))
	return &DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Device.
func (c *DeviceClient) Delete() *DeviceDelete {
	mutation := newDeviceMutation(c.config, OpDelete)
	return &DeviceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeviceClient) DeleteOne(d *Device) *DeviceDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeviceClient) DeleteOneID(id int) *DeviceDeleteOne {
	builder := c.Delete().Where(device.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceDeleteOne{builder}
}

// Create returns a query builder for Device.
func (c *DeviceClient) Query() *DeviceQuery {
	return &DeviceQuery{config: c.config}
}

// Get returns a Device entity by its id.
func (c *DeviceClient) Get(ctx context.Context, id int) (*Device, error) {
	return c.Query().Where(device.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceClient) GetX(ctx context.Context, id int) *Device {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryOwner queries the owner edge of a Device.
func (c *DeviceClient) QueryOwner(d *Device) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, device.OwnerTable, device.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRepairInformation queries the repair_information edge of a Device.
func (c *DeviceClient) QueryRepairInformation(d *Device) *RepairInvoiceQuery {
	query := &RepairInvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(repairinvoice.Table, repairinvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, device.RepairInformationTable, device.RepairInformationColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeviceClient) Hooks() []Hook {
	return c.hooks.Device
}

// RepairInvoiceClient is a client for the RepairInvoice schema.
type RepairInvoiceClient struct {
	config
}

// NewRepairInvoiceClient returns a client for the RepairInvoice from the given config.
func NewRepairInvoiceClient(c config) *RepairInvoiceClient {
	return &RepairInvoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repairinvoice.Hooks(f(g(h())))`.
func (c *RepairInvoiceClient) Use(hooks ...Hook) {
	c.hooks.RepairInvoice = append(c.hooks.RepairInvoice, hooks...)
}

// Create returns a create builder for RepairInvoice.
func (c *RepairInvoiceClient) Create() *RepairInvoiceCreate {
	mutation := newRepairInvoiceMutation(c.config, OpCreate)
	return &RepairInvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for RepairInvoice.
func (c *RepairInvoiceClient) Update() *RepairInvoiceUpdate {
	mutation := newRepairInvoiceMutation(c.config, OpUpdate)
	return &RepairInvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepairInvoiceClient) UpdateOne(ri *RepairInvoice) *RepairInvoiceUpdateOne {
	mutation := newRepairInvoiceMutation(c.config, OpUpdateOne, withRepairInvoice(ri))
	return &RepairInvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepairInvoiceClient) UpdateOneID(id int) *RepairInvoiceUpdateOne {
	mutation := newRepairInvoiceMutation(c.config, OpUpdateOne, withRepairInvoiceID(id))
	return &RepairInvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RepairInvoice.
func (c *RepairInvoiceClient) Delete() *RepairInvoiceDelete {
	mutation := newRepairInvoiceMutation(c.config, OpDelete)
	return &RepairInvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RepairInvoiceClient) DeleteOne(ri *RepairInvoice) *RepairInvoiceDeleteOne {
	return c.DeleteOneID(ri.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RepairInvoiceClient) DeleteOneID(id int) *RepairInvoiceDeleteOne {
	builder := c.Delete().Where(repairinvoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepairInvoiceDeleteOne{builder}
}

// Create returns a query builder for RepairInvoice.
func (c *RepairInvoiceClient) Query() *RepairInvoiceQuery {
	return &RepairInvoiceQuery{config: c.config}
}

// Get returns a RepairInvoice entity by its id.
func (c *RepairInvoiceClient) Get(ctx context.Context, id int) (*RepairInvoice, error) {
	return c.Query().Where(repairinvoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepairInvoiceClient) GetX(ctx context.Context, id int) *RepairInvoice {
	ri, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ri
}

// QueryDevice queries the device edge of a RepairInvoice.
func (c *RepairInvoiceClient) QueryDevice(ri *RepairInvoice) *DeviceQuery {
	query := &DeviceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repairinvoice.Table, repairinvoice.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repairinvoice.DeviceTable, repairinvoice.DeviceColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatus queries the status edge of a RepairInvoice.
func (c *RepairInvoiceClient) QueryStatus(ri *RepairInvoice) *StatusRQuery {
	query := &StatusRQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repairinvoice.Table, repairinvoice.FieldID, id),
			sqlgraph.To(statusr.Table, statusr.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repairinvoice.StatusTable, repairinvoice.StatusColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySymptom queries the symptom edge of a RepairInvoice.
func (c *RepairInvoiceClient) QuerySymptom(ri *RepairInvoice) *SymptomQuery {
	query := &SymptomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repairinvoice.Table, repairinvoice.FieldID, id),
			sqlgraph.To(symptom.Table, symptom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repairinvoice.SymptomTable, repairinvoice.SymptomColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepairInvoiceClient) Hooks() []Hook {
	return c.hooks.RepairInvoice
}

// StatusRClient is a client for the StatusR schema.
type StatusRClient struct {
	config
}

// NewStatusRClient returns a client for the StatusR from the given config.
func NewStatusRClient(c config) *StatusRClient {
	return &StatusRClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statusr.Hooks(f(g(h())))`.
func (c *StatusRClient) Use(hooks ...Hook) {
	c.hooks.StatusR = append(c.hooks.StatusR, hooks...)
}

// Create returns a create builder for StatusR.
func (c *StatusRClient) Create() *StatusRCreate {
	mutation := newStatusRMutation(c.config, OpCreate)
	return &StatusRCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for StatusR.
func (c *StatusRClient) Update() *StatusRUpdate {
	mutation := newStatusRMutation(c.config, OpUpdate)
	return &StatusRUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusRClient) UpdateOne(s *StatusR) *StatusRUpdateOne {
	mutation := newStatusRMutation(c.config, OpUpdateOne, withStatusR(s))
	return &StatusRUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusRClient) UpdateOneID(id int) *StatusRUpdateOne {
	mutation := newStatusRMutation(c.config, OpUpdateOne, withStatusRID(id))
	return &StatusRUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusR.
func (c *StatusRClient) Delete() *StatusRDelete {
	mutation := newStatusRMutation(c.config, OpDelete)
	return &StatusRDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusRClient) DeleteOne(s *StatusR) *StatusRDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusRClient) DeleteOneID(id int) *StatusRDeleteOne {
	builder := c.Delete().Where(statusr.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusRDeleteOne{builder}
}

// Create returns a query builder for StatusR.
func (c *StatusRClient) Query() *StatusRQuery {
	return &StatusRQuery{config: c.config}
}

// Get returns a StatusR entity by its id.
func (c *StatusRClient) Get(ctx context.Context, id int) (*StatusR, error) {
	return c.Query().Where(statusr.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusRClient) GetX(ctx context.Context, id int) *StatusR {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryRepairInformation queries the repair_information edge of a StatusR.
func (c *StatusRClient) QueryRepairInformation(s *StatusR) *RepairInvoiceQuery {
	query := &RepairInvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusr.Table, statusr.FieldID, id),
			sqlgraph.To(repairinvoice.Table, repairinvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusr.RepairInformationTable, statusr.RepairInformationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusRClient) Hooks() []Hook {
	return c.hooks.StatusR
}

// SymptomClient is a client for the Symptom schema.
type SymptomClient struct {
	config
}

// NewSymptomClient returns a client for the Symptom from the given config.
func NewSymptomClient(c config) *SymptomClient {
	return &SymptomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `symptom.Hooks(f(g(h())))`.
func (c *SymptomClient) Use(hooks ...Hook) {
	c.hooks.Symptom = append(c.hooks.Symptom, hooks...)
}

// Create returns a create builder for Symptom.
func (c *SymptomClient) Create() *SymptomCreate {
	mutation := newSymptomMutation(c.config, OpCreate)
	return &SymptomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Symptom.
func (c *SymptomClient) Update() *SymptomUpdate {
	mutation := newSymptomMutation(c.config, OpUpdate)
	return &SymptomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SymptomClient) UpdateOne(s *Symptom) *SymptomUpdateOne {
	mutation := newSymptomMutation(c.config, OpUpdateOne, withSymptom(s))
	return &SymptomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SymptomClient) UpdateOneID(id int) *SymptomUpdateOne {
	mutation := newSymptomMutation(c.config, OpUpdateOne, withSymptomID(id))
	return &SymptomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Symptom.
func (c *SymptomClient) Delete() *SymptomDelete {
	mutation := newSymptomMutation(c.config, OpDelete)
	return &SymptomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SymptomClient) DeleteOne(s *Symptom) *SymptomDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SymptomClient) DeleteOneID(id int) *SymptomDeleteOne {
	builder := c.Delete().Where(symptom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SymptomDeleteOne{builder}
}

// Create returns a query builder for Symptom.
func (c *SymptomClient) Query() *SymptomQuery {
	return &SymptomQuery{config: c.config}
}

// Get returns a Symptom entity by its id.
func (c *SymptomClient) Get(ctx context.Context, id int) (*Symptom, error) {
	return c.Query().Where(symptom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SymptomClient) GetX(ctx context.Context, id int) *Symptom {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryRepairInformation queries the repair_information edge of a Symptom.
func (c *SymptomClient) QueryRepairInformation(s *Symptom) *RepairInvoiceQuery {
	query := &RepairInvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(symptom.Table, symptom.FieldID, id),
			sqlgraph.To(repairinvoice.Table, repairinvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, symptom.RepairInformationTable, symptom.RepairInformationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SymptomClient) Hooks() []Hook {
	return c.hooks.Symptom
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryDevice queries the device edge of a User.
func (c *UserClient) QueryDevice(u *User) *DeviceQuery {
	query := &DeviceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.DeviceTable, user.DeviceColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
